import { firefox } from "playwright";

import { registerTransformedJobResultsInDB } from "@/scripts/database/register-database";
import { countryUrls } from "@/scripts/fetch-jobs/data/urls/country-urls";
import { getJobResults } from "@/scripts/fetch-jobs/parsing/get-job-results";
import { getSearchCountry } from "@/scripts/fetch-jobs/parsing/get-search-country";
import { transformJobResults } from "@/scripts/fetch-jobs/parsing/transform-job-results";
import { fetchPageScrapFly } from "@/scripts/fetch-jobs/requests/scrapFly";
import { buildSearchUrl } from "@/scripts/fetch-jobs/utils/url-builder";
import { blockResourcesAndAds } from "@/scripts/utils/playwright-block-ressources";

const main = async () => {
  const browser = await firefox.launch();

  // Transform countryUrls into an array of promises
  const countryPromises = Object.entries(countryUrls).flatMap(
    ([country, details]) =>
      Object.entries(details.searches).map(async ([searchKey, searchQuery]) => {
        const context = await browser.newContext();
        const page = await context.newPage();

        await blockResourcesAndAds(page);

        const indeedSearchUrl = buildSearchUrl(country, searchQuery.query, 100);

        const initialSearchHTML = await fetchPageScrapFly(indeedSearchUrl);
        const jobResults = await getJobResults(indeedSearchUrl);
        const searchCountry = getSearchCountry(initialSearchHTML);
        const transformedJobResults = transformJobResults(
          jobResults,
          searchCountry,
        );

        await registerTransformedJobResultsInDB(
          transformedJobResults,
          indeedSearchUrl,
        );

        await context.close();
      }),
  );

  // Execute all promises generated by the map
  await Promise.all(countryPromises);

  console.log("ALL SEARCHES HAVE BEEN COMPLETED");
  await browser.close();
};

main().catch(console.error);
